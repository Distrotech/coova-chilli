--- cmdline.c.ggo	2006-09-01 19:01:28.000000000 +0200
+++ cmdline.c	2006-09-01 19:33:20.000000000 +0200
@@ -1,7 +1,9 @@
 /*
   File autogenerated by gengetopt version 2.16
   generated with the following command:
-  gengetopt -C 
+
+  gengetopt -C < cmdline.ggo
+  patch -p0 < cmdline.c.patch
 
   The developers of gengetopt consider the fixed text that goes in all
   gengetopt output files to be in the public domain:
@@ -13,12 +15,8 @@
 #include "config.h"
 #endif
 
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
+#include "system.h"
 #include "getopt.h"
-
 #include "cmdline.h"
 
 static
@@ -53,7 +51,7 @@
   struct macallowed_list * next;
 };
 
-static char *
+char *
 gengetopt_strdup (const char *s);
 
 static
@@ -69,6 +67,8 @@
   args_info->pidfile_given = 0 ;
   args_info->statedir_given = 0 ;
   args_info->net_given = 0 ;
+  args_info->dhcpstart_given = 0 ;
+  args_info->dhcpend_given = 0 ;
   args_info->dynip_given = 0 ;
   args_info->statip_given = 0 ;
   args_info->dns1_given = 0 ;
@@ -76,6 +76,9 @@
   args_info->domain_given = 0 ;
   args_info->ipup_given = 0 ;
   args_info->ipdown_given = 0 ;
+  args_info->conup_given = 0 ;
+  args_info->condown_given = 0 ;
+  args_info->txqlen_given = 0 ;
   args_info->radiuslisten_given = 0 ;
   args_info->radiusserver1_given = 0 ;
   args_info->radiusserver2_given = 0 ;
@@ -117,6 +120,9 @@
   args_info->ssid_given = 0 ;
   args_info->vlan_given = 0 ;
   args_info->cmdsocket_given = 0 ;
+  args_info->swapoctets_given = 0 ;
+  args_info->usestatusfile_given = 0 ;
+  args_info->chillixml_given = 0 ;
 }
 
 static
@@ -136,6 +142,10 @@
   args_info->statedir_orig = NULL;
   args_info->net_arg = gengetopt_strdup ("192.168.182.0/24");
   args_info->net_orig = NULL;
+  args_info->dhcpstart_arg = 10;
+  args_info->dhcpstart_orig = NULL;
+  args_info->dhcpend_arg = 254;
+  args_info->dhcpend_orig = NULL;
   args_info->dynip_arg = NULL;
   args_info->dynip_orig = NULL;
   args_info->statip_arg = NULL;
@@ -150,6 +160,12 @@
   args_info->ipup_orig = NULL;
   args_info->ipdown_arg = NULL;
   args_info->ipdown_orig = NULL;
+  args_info->conup_arg = NULL;
+  args_info->conup_orig = NULL;
+  args_info->condown_arg = NULL;
+  args_info->condown_orig = NULL;
+  args_info->txqlen_arg = 100;
+  args_info->txqlen_orig = NULL;
   args_info->radiuslisten_arg = NULL;
   args_info->radiuslisten_orig = NULL;
   args_info->radiusserver1_arg = NULL;
@@ -226,6 +242,9 @@
   args_info->vlan_orig = NULL;
   args_info->cmdsocket_arg = NULL;
   args_info->cmdsocket_orig = NULL;
+  args_info->swapoctets_flag = 0;
+  args_info->usestatusfile_flag = 0;
+  args_info->chillixml_flag = 0;
   
 }
 
@@ -250,6 +269,8 @@
   printf("%s\n","      --pidfile=STRING          Filename of process id file  \n                                  (default=`/var/run/chilli.pid')");
   printf("%s\n","      --statedir=STRING         Directory of nonvolatile data  \n                                  (default=`/var/lib/chilli/')");
   printf("%s\n","  -n, --net=STRING              Network  (default=`192.168.182.0/24')");
+  printf("%s\n","      --dhcpstart=INT           Network DHCP Starting IP  (default=`10')");
+  printf("%s\n","      --dhcpend=INT             Network DHCP Ending IP  (default=`254')");
   printf("%s\n","      --dynip=STRING            Dynamic IP address pool");
   printf("%s\n","      --statip=STRING           Static IP address pool");
   printf("%s\n","      --dns1=STRING             Primary DNS server IP address");
@@ -257,6 +278,9 @@
   printf("%s\n","      --domain=STRING           Domain to use for DNS lookups  \n                                  (default=`picopoint.com')");
   printf("%s\n","      --ipup=STRING             Script to run after link-up");
   printf("%s\n","      --ipdown=STRING           Script to run after link-down");
+  printf("%s\n","      --conup=STRING            Script to run after user logon");
+  printf("%s\n","      --condown=STRING          Script to run after user logoff");
+  printf("%s\n","      --txqlen=INT              TX Queue length for tun interface (linux only)  \n                                  (default=`100')");
   printf("%s\n","      --radiuslisten=STRING     IP address to send from");
   printf("%s\n","      --radiusserver1=STRING    IP address of radius server 1");
   printf("%s\n","      --radiusserver2=STRING    IP address of radius server 2");
@@ -298,6 +322,9 @@
   printf("%s\n","      --ssid=STRING             SSID of the session");
   printf("%s\n","      --vlan=STRING             VLAN of the session");
   printf("%s\n","      --cmdsocket=STRING        path to the command unix socket");
+  printf("%s\n","      --swapoctets              Swap the meaning of input/output octets/packets \n                                   (default=off)");
+  printf("%s\n","      --usestatusfile           Use the status file to keep track of sessions  \n                                  (default=off)");
+  printf("%s\n","      --chillixml               Use ChilliSpot XML in WISPr blocks  \n                                  (default=off)");
   
 }
 
@@ -308,7 +335,7 @@
   clear_args (args_info);
 }
 
-static void
+void
 cmdline_parser_release (struct gengetopt_args_info *args_info)
 {
   
@@ -363,6 +390,16 @@
       free (args_info->net_orig); /* free previous argument */
       args_info->net_orig = 0;
     }
+  if (args_info->dhcpstart_orig)
+    {
+      free (args_info->dhcpstart_orig); /* free previous argument */
+      args_info->dhcpstart_orig = 0;
+    }
+  if (args_info->dhcpend_orig)
+    {
+      free (args_info->dhcpend_orig); /* free previous argument */
+      args_info->dhcpend_orig = 0;
+    }
   if (args_info->dynip_arg)
     {
       free (args_info->dynip_arg); /* free previous argument */
@@ -433,6 +470,31 @@
       free (args_info->ipdown_orig); /* free previous argument */
       args_info->ipdown_orig = 0;
     }
+  if (args_info->conup_arg)
+    {
+      free (args_info->conup_arg); /* free previous argument */
+      args_info->conup_arg = 0;
+    }
+  if (args_info->conup_orig)
+    {
+      free (args_info->conup_orig); /* free previous argument */
+      args_info->conup_orig = 0;
+    }
+  if (args_info->condown_arg)
+    {
+      free (args_info->condown_arg); /* free previous argument */
+      args_info->condown_arg = 0;
+    }
+  if (args_info->condown_orig)
+    {
+      free (args_info->condown_orig); /* free previous argument */
+      args_info->condown_orig = 0;
+    }
+  if (args_info->txqlen_orig)
+    {
+      free (args_info->txqlen_orig); /* free previous argument */
+      args_info->txqlen_orig = 0;
+    }
   if (args_info->radiuslisten_arg)
     {
       free (args_info->radiuslisten_arg); /* free previous argument */
@@ -844,6 +906,20 @@
       fprintf(outfile, "%s\n", "net");
     }
   }
+  if (args_info->dhcpstart_given) {
+    if (args_info->dhcpstart_orig) {
+      fprintf(outfile, "%s=\"%s\"\n", "dhcpstart", args_info->dhcpstart_orig);
+    } else {
+      fprintf(outfile, "%s\n", "dhcpstart");
+    }
+  }
+  if (args_info->dhcpend_given) {
+    if (args_info->dhcpend_orig) {
+      fprintf(outfile, "%s=\"%s\"\n", "dhcpend", args_info->dhcpend_orig);
+    } else {
+      fprintf(outfile, "%s\n", "dhcpend");
+    }
+  }
   if (args_info->dynip_given) {
     if (args_info->dynip_orig) {
       fprintf(outfile, "%s=\"%s\"\n", "dynip", args_info->dynip_orig);
@@ -893,6 +969,27 @@
       fprintf(outfile, "%s\n", "ipdown");
     }
   }
+  if (args_info->conup_given) {
+    if (args_info->conup_orig) {
+      fprintf(outfile, "%s=\"%s\"\n", "conup", args_info->conup_orig);
+    } else {
+      fprintf(outfile, "%s\n", "conup");
+    }
+  }
+  if (args_info->condown_given) {
+    if (args_info->condown_orig) {
+      fprintf(outfile, "%s=\"%s\"\n", "condown", args_info->condown_orig);
+    } else {
+      fprintf(outfile, "%s\n", "condown");
+    }
+  }
+  if (args_info->txqlen_given) {
+    if (args_info->txqlen_orig) {
+      fprintf(outfile, "%s=\"%s\"\n", "txqlen", args_info->txqlen_orig);
+    } else {
+      fprintf(outfile, "%s\n", "txqlen");
+    }
+  }
   if (args_info->radiuslisten_given) {
     if (args_info->radiuslisten_orig) {
       fprintf(outfile, "%s=\"%s\"\n", "radiuslisten", args_info->radiuslisten_orig);
@@ -1162,6 +1259,15 @@
       fprintf(outfile, "%s\n", "cmdsocket");
     }
   }
+  if (args_info->swapoctets_given) {
+    fprintf(outfile, "%s\n", "swapoctets");
+  }
+  if (args_info->usestatusfile_given) {
+    fprintf(outfile, "%s\n", "usestatusfile");
+  }
+  if (args_info->chillixml_given) {
+    fprintf(outfile, "%s\n", "chillixml");
+  }
   
   fclose (outfile);
 
@@ -1308,6 +1414,8 @@
         { "pidfile",	1, NULL, 0 },
         { "statedir",	1, NULL, 0 },
         { "net",	1, NULL, 'n' },
+        { "dhcpstart",	1, NULL, 0 },
+        { "dhcpend",	1, NULL, 0 },
         { "dynip",	1, NULL, 0 },
         { "statip",	1, NULL, 0 },
         { "dns1",	1, NULL, 0 },
@@ -1315,6 +1423,9 @@
         { "domain",	1, NULL, 0 },
         { "ipup",	1, NULL, 0 },
         { "ipdown",	1, NULL, 0 },
+        { "conup",	1, NULL, 0 },
+        { "condown",	1, NULL, 0 },
+        { "txqlen",	1, NULL, 0 },
         { "radiuslisten",	1, NULL, 0 },
         { "radiusserver1",	1, NULL, 0 },
         { "radiusserver2",	1, NULL, 0 },
@@ -1356,6 +1467,9 @@
         { "ssid",	1, NULL, 0 },
         { "vlan",	1, NULL, 0 },
         { "cmdsocket",	1, NULL, 0 },
+        { "swapoctets",	0, NULL, 0 },
+        { "usestatusfile",	0, NULL, 0 },
+        { "chillixml",	0, NULL, 0 },
         { NULL,	0, NULL, 0 }
       };
 
@@ -1520,6 +1634,48 @@
               free (args_info->statedir_orig); /* free previous string */
             args_info->statedir_orig = gengetopt_strdup (optarg);
           }
+          /* Network DHCP Starting IP.  */
+          else if (strcmp (long_options[option_index].name, "dhcpstart") == 0)
+          {
+            if (local_args_info.dhcpstart_given)
+              {
+                fprintf (stderr, "%s: `--dhcpstart' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->dhcpstart_given && ! override)
+              continue;
+            local_args_info.dhcpstart_given = 1;
+            args_info->dhcpstart_given = 1;
+            args_info->dhcpstart_arg = strtol (optarg, &stop_char, 0);
+            if (!(stop_char && *stop_char == '\0')) {
+              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
+              goto failure;
+            }
+            if (args_info->dhcpstart_orig)
+              free (args_info->dhcpstart_orig); /* free previous string */
+            args_info->dhcpstart_orig = gengetopt_strdup (optarg);
+          }
+          /* Network DHCP Ending IP.  */
+          else if (strcmp (long_options[option_index].name, "dhcpend") == 0)
+          {
+            if (local_args_info.dhcpend_given)
+              {
+                fprintf (stderr, "%s: `--dhcpend' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->dhcpend_given && ! override)
+              continue;
+            local_args_info.dhcpend_given = 1;
+            args_info->dhcpend_given = 1;
+            args_info->dhcpend_arg = strtol (optarg, &stop_char, 0);
+            if (!(stop_char && *stop_char == '\0')) {
+              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
+              goto failure;
+            }
+            if (args_info->dhcpend_orig)
+              free (args_info->dhcpend_orig); /* free previous string */
+            args_info->dhcpend_orig = gengetopt_strdup (optarg);
+          }
           /* Dynamic IP address pool.  */
           else if (strcmp (long_options[option_index].name, "dynip") == 0)
           {
@@ -1653,6 +1809,65 @@
               free (args_info->ipdown_orig); /* free previous string */
             args_info->ipdown_orig = gengetopt_strdup (optarg);
           }
+          /* Script to run after user logon.  */
+          else if (strcmp (long_options[option_index].name, "conup") == 0)
+          {
+            if (local_args_info.conup_given)
+              {
+                fprintf (stderr, "%s: `--conup' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->conup_given && ! override)
+              continue;
+            local_args_info.conup_given = 1;
+            args_info->conup_given = 1;
+            if (args_info->conup_arg)
+              free (args_info->conup_arg); /* free previous string */
+            args_info->conup_arg = gengetopt_strdup (optarg);
+            if (args_info->conup_orig)
+              free (args_info->conup_orig); /* free previous string */
+            args_info->conup_orig = gengetopt_strdup (optarg);
+          }
+          /* Script to run after user logoff.  */
+          else if (strcmp (long_options[option_index].name, "condown") == 0)
+          {
+            if (local_args_info.condown_given)
+              {
+                fprintf (stderr, "%s: `--condown' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->condown_given && ! override)
+              continue;
+            local_args_info.condown_given = 1;
+            args_info->condown_given = 1;
+            if (args_info->condown_arg)
+              free (args_info->condown_arg); /* free previous string */
+            args_info->condown_arg = gengetopt_strdup (optarg);
+            if (args_info->condown_orig)
+              free (args_info->condown_orig); /* free previous string */
+            args_info->condown_orig = gengetopt_strdup (optarg);
+          }
+          /* TX Queue length for tun interface (linux only).  */
+          else if (strcmp (long_options[option_index].name, "txqlen") == 0)
+          {
+            if (local_args_info.txqlen_given)
+              {
+                fprintf (stderr, "%s: `--txqlen' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->txqlen_given && ! override)
+              continue;
+            local_args_info.txqlen_given = 1;
+            args_info->txqlen_given = 1;
+            args_info->txqlen_arg = strtol (optarg, &stop_char, 0);
+            if (!(stop_char && *stop_char == '\0')) {
+              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
+              goto failure;
+            }
+            if (args_info->txqlen_orig)
+              free (args_info->txqlen_orig); /* free previous string */
+            args_info->txqlen_orig = gengetopt_strdup (optarg);
+          }
           /* IP address to send from.  */
           else if (strcmp (long_options[option_index].name, "radiuslisten") == 0)
           {
@@ -2432,6 +2647,48 @@
               free (args_info->cmdsocket_orig); /* free previous string */
             args_info->cmdsocket_orig = gengetopt_strdup (optarg);
           }
+          /* Swap the meaning of input/output octets/packets.  */
+          else if (strcmp (long_options[option_index].name, "swapoctets") == 0)
+          {
+            if (local_args_info.swapoctets_given)
+              {
+                fprintf (stderr, "%s: `--swapoctets' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->swapoctets_given && ! override)
+              continue;
+            local_args_info.swapoctets_given = 1;
+            args_info->swapoctets_given = 1;
+            args_info->swapoctets_flag = !(args_info->swapoctets_flag);
+          }
+          /* Use the status file to keep track of sessions.  */
+          else if (strcmp (long_options[option_index].name, "usestatusfile") == 0)
+          {
+            if (local_args_info.usestatusfile_given)
+              {
+                fprintf (stderr, "%s: `--usestatusfile' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->usestatusfile_given && ! override)
+              continue;
+            local_args_info.usestatusfile_given = 1;
+            args_info->usestatusfile_given = 1;
+            args_info->usestatusfile_flag = !(args_info->usestatusfile_flag);
+          }
+          /* Use ChilliSpot XML in WISPr blocks.  */
+          else if (strcmp (long_options[option_index].name, "chillixml") == 0)
+          {
+            if (local_args_info.chillixml_given)
+              {
+                fprintf (stderr, "%s: `--chillixml' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
+                goto failure;
+              }
+            if (args_info->chillixml_given && ! override)
+              continue;
+            local_args_info.chillixml_given = 1;
+            args_info->chillixml_given = 1;
+            args_info->chillixml_flag = !(args_info->chillixml_flag);
+          }
           
           break;
         case '?':	/* Invalid option.  */
@@ -2527,55 +2784,41 @@
 #define CONFIG_FILE_LINE_BUFFER_SIZE (CONFIG_FILE_LINE_SIZE+3)
 /* 3 is for "--" and "=" */
 
-char my_argv[CONFIG_FILE_LINE_BUFFER_SIZE+1];
-
-int
-cmdline_parser_configfile (char * const filename, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
-{
-  FILE* file;
+static int
+parse_configfile (char * const filename, int *my_argc) {
+  char my_argv[CONFIG_FILE_LINE_BUFFER_SIZE+1];
+  FILE * file;
   char linebuf[CONFIG_FILE_LINE_SIZE];
   int line_num = 0;
-  int i, result, equal;
+  int result=0, equal;
   char *fopt, *farg;
   char *str_index;
   size_t len, next_token;
   char delimiter;
-  int my_argc = 0;
-  char **my_argv_arg;
-  char *additional_error;
 
-  /* store the program name */
-  cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
-  cmd_line_list_tmp->next = cmd_line_list;
-  cmd_line_list = cmd_line_list_tmp;
-  cmd_line_list->string_arg = gengetopt_strdup (CMDLINE_PARSER_PACKAGE);
-
-  if ((file = fopen(filename, "r")) == NULL)
-    {
+  if ((file = fopen(filename, "r")) == NULL) {
       fprintf (stderr, "%s: Error opening configuration file '%s'\n",
                CMDLINE_PARSER_PACKAGE, filename);
-      result = EXIT_FAILURE;
-      goto conf_failure;
+    return EXIT_FAILURE;
     }
 
-  while ((fgets(linebuf, CONFIG_FILE_LINE_SIZE, file)) != NULL)
-    {
+  while ((fgets(linebuf, CONFIG_FILE_LINE_SIZE, file)) != NULL) {
       ++line_num;
       my_argv[0] = '\0';
       len = strlen(linebuf);
-      if (len > (CONFIG_FILE_LINE_BUFFER_SIZE-1))
-        {
+    
+    if (len > (CONFIG_FILE_LINE_BUFFER_SIZE-1)) {
           fprintf (stderr, "%s:%s:%d: Line too long in configuration file\n",
                    CMDLINE_PARSER_PACKAGE, filename, line_num);
           result = EXIT_FAILURE;
-          goto conf_failure;
+      break;
         }
 
       /* find first non-whitespace character in the line */
-      next_token = strspn ( linebuf, " \t\r\n");
+    next_token = strspn (linebuf, " \t\r\n");
       str_index  = linebuf + next_token;
 
-      if ( str_index[0] == '\0' || str_index[0] == '#')
+    if (str_index[0] == '\0' || str_index[0] == '#')
         continue; /* empty line or comment line is skipped */
 
       fopt = str_index;
@@ -2596,10 +2839,10 @@
 
       /* advance pointers to the next token after the end of fopt */
       next_token += strspn (fopt + next_token, " \t\r\n");
+    
       /* check for the presence of equal sign, and if so, skip it */
-      if ( !equal )
-        if ((equal = (fopt[next_token] == '=')))
-          {
+    if (!equal)
+      if ((equal = (fopt[next_token] == '='))) {
             next_token++;
             next_token += strspn (fopt + next_token, " \t\r\n");
           }
@@ -2617,7 +2860,7 @@
                  "%s:%s:%d: unterminated string in configuration file\n",
                  CMDLINE_PARSER_PACKAGE, filename, line_num);
               result = EXIT_FAILURE;
-              goto conf_failure;
+            break;
             }
         }
       else
@@ -2635,25 +2878,30 @@
           str_index += strspn(str_index, " \t\r\n");
           if (*str_index != '\0' && *str_index != '#')
             {
-              fprintf
-                (stderr,
-                 "%s:%s:%d: malformed string in configuration file\n",
+            fprintf(stderr, "%s:%s:%d: malformed string in configuration file\n",
                  CMDLINE_PARSER_PACKAGE, filename, line_num);
               result = EXIT_FAILURE;
-              goto conf_failure;
+            break;
             }
         }
 
     noarg:
-      ++my_argc;
-      len = strlen(fopt);
+    if (!strcmp(fopt,"include")) {
+      if (farg && *farg) {
+        result = parse_configfile(farg, my_argc);
+      } else {
+        fprintf(stderr, "%s:%s:%d: include requires a filename argument.\n",
+                CMDLINE_PARSER_PACKAGE, filename, line_num);
+      }
+      continue;
+    }
 
+    len = strlen(fopt);
       strcat (my_argv, len > 1 ? "--" : "-");
       strcat (my_argv, fopt);
-      if (len > 1 && ((farg &&*farg) || equal))
-          strcat (my_argv, "=");
-      if (farg && *farg)
-          strcat (my_argv, farg);
+    if (len > 1 && ((farg && *farg) || equal)) strcat (my_argv, "=");
+    if (farg && *farg) strcat (my_argv, farg);
+    ++(*my_argc);
 
       cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
       cmd_line_list_tmp->next = cmd_line_list;
@@ -2661,31 +2909,54 @@
       cmd_line_list->string_arg = gengetopt_strdup(my_argv);
     } /* while */
 
-  ++my_argc; /* for program name */
+  if (file) fclose(file);
+  return result;
+}
+
+
+int 
+cmdline_parser_configfile (char * const filename, 
+			   struct gengetopt_args_info *args_info, int override, 
+			   int initialize, int check_required) {
+  int i, result;
+  int my_argc = 1;
+  char **my_argv_arg;
+  char *additional_error;
+
+  /* store the program name */
+  cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
+  cmd_line_list_tmp->next = cmd_line_list;
+  cmd_line_list = cmd_line_list_tmp;
+  cmd_line_list->string_arg = gengetopt_strdup (CMDLINE_PARSER_PACKAGE);
+
+  result = parse_configfile(filename, &my_argc);
+
+  if (result != EXIT_FAILURE) {
   my_argv_arg = (char **) malloc((my_argc+1) * sizeof(char *));
   cmd_line_list_tmp = cmd_line_list;
+    
   for (i = my_argc - 1; i >= 0; --i) {
     my_argv_arg[i] = cmd_line_list_tmp->string_arg;
     cmd_line_list_tmp = cmd_line_list_tmp->next;
   }
+
   my_argv_arg[my_argc] = 0;
 
   additional_error = (char *)malloc(strlen(filename) + strlen(ADDITIONAL_ERROR) + 1);
   strcpy (additional_error, ADDITIONAL_ERROR);
   strcat (additional_error, filename);
-  result =
-    cmdline_parser_internal (my_argc, my_argv_arg, args_info, override, initialize, check_required, additional_error);
+    
+    result = cmdline_parser_internal (my_argc, my_argv_arg, args_info,
+                                      override, initialize, check_required,
+                                      additional_error);
 
   free (additional_error);
   free (my_argv_arg);
+  }
 
-conf_failure:
-  if (file)
-    fclose(file);
-  if (result == EXIT_FAILURE)
-    {
+  if (result == EXIT_FAILURE) {
       cmdline_parser_free (args_info);
-      exit (EXIT_FAILURE);
+    exit(EXIT_FAILURE);
     }
   
   return result;
