#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.57)
AC_INIT(coova-chilli, 1.0.15-pre1, support@coova.com)
AC_CONFIG_SRCDIR([src/cmdline.c])

AM_INIT_AUTOMAKE

AM_CONFIG_HEADER([config.h])

# Checks for programs.
AC_PROG_CC

#JJAKO Check for libtool
AC_PROG_LIBTOOL
AM_PROG_LIBTOOL
AC_ARG_PROGRAM

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h errno.h fcntl.h \
		  netdb.h netinet/in.h \
		  stdint.h stdlib.h string.h \
		  sys/ioctl.h sys/socket.h sys/sysinfo.h \
		  sys/param.h sys/time.h \
		  sys/ipc.h sys/msg.h \
		  sys/wait.h sys/un.h \
		  sys/stat.h sys/types.h \
		  syslog.h resolv.h \
		  unistd.h endian.h \
		  net/route.h net/if.h \
		  net/ethernet.h asm/types.h \
		  net/if_arp.h net/if_tun.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_MODE_T
AC_HEADER_TIME

# Checks for library functions.
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_SELECT_ARGTYPES
AC_CHECK_FUNCS([gethostbyname getprotoent gettimeofday inet_ntoa memset select socket strdup strerror strstr strtol getline])
AC_CHECK_LIB(resolv, res_init)

AC_ARG_ENABLE(leakybucket, [AC_HELP_STRING([--disable-leakybucket],[disable use of leaky bucket shaping])], 
  enable_leakybucket=$enableval, enable_leakybucket=yes)

if test x"$enable_leakybucket" = xyes; then
   AC_DEFINE(ENABLE_LEAKYBUCKET,1,[Define to enable Chilli Leaky Bucket shaping])
fi

AC_ARG_ENABLE(chillixml, [AC_HELP_STRING([--disable-chillixml],[disable use of chillixml])], 
  enable_chillixml=$enableval, enable_chillixml=yes)

if test x"$enable_chillixml" = xyes; then
   AC_DEFINE(ENABLE_CHILLIXML,1,[Define to enable Chilli XML])
fi

AC_ARG_ENABLE(json, [AC_HELP_STRING([--disable-json],[disable support for JSON])], 
  enable_json=$enableval, enable_json=yes)

if test x"$enable_json" = xyes; then
   AC_DEFINE(ENABLE_JSON,1,[Define to enable Chilli JSON])
fi

AC_ARG_ENABLE(sessgarden, [AC_HELP_STRING([--disable-sessgarden],[disable support for session walled garden])], 
  enable_sessgarden=$enableval, enable_sessgarden=yes)

if test x"$enable_sessgarden" = xyes; then
   AC_DEFINE(ENABLE_SESSGARDEN,1,[Define to enable Chilli session walled garden])
fi

AC_ARG_ENABLE(ieee8021q, [AC_HELP_STRING([--disable-ieee8021q],[disable support for IEEE 802.1Q])], 
  enable_ieee8021q=$enableval, enable_ieee8021q=yes)

if test x"$enable_ieee8021q" = xyes; then
   AC_DEFINE(ENABLE_IEEE8021Q,1,[Define to enable Chilli IEEE 802.1Q])
fi

AC_ARG_ENABLE(largelimits, [AC_HELP_STRING([--enable-largelimits],[Enable larger limits for use with non-embedded systems])], 
  enable_largelimits=$enableval, enable_largelimits=no)

if test x"$enable_largelimits" = xyes; then
   AC_DEFINE(ENABLE_LARGELIMITS,1,[Enable larger limits for use with non-embedded systems])
fi

AC_ARG_WITH([openssl],
 [AS_HELP_STRING([--with-openssl], [enable support for openssl])],[],[with_openssl=no])

OPENSSL=
AS_IF([test x"$with_openssl" != xno],
  [AC_CHECK_LIB([crypto], [CRYPTO_malloc],
              [AC_SUBST([LIBOPENSSL], ["-lssl -lcrypto"])
               AC_DEFINE([HAVE_OPENSSL], [1],
                         [Define if you have openssl])
              ],
              [AC_MSG_FAILURE(
                 [--with-openssl was given, but test for openssl failed])],
              [-lssl -lcrypto])])

AM_CONDITIONAL(WITH_OPENSSL, [test x"$with_openssl" != xno])

AC_ARG_ENABLE(binstatusfile, [AC_HELP_STRING([--enable-binstatusfile],[Enable support for binary status file])], 
  enable_binstatfile=$enableval, enable_binstatfile=no)

if test x"$enable_binstatfile" = xyes; then
   AC_DEFINE(ENABLE_BINSTATFILE,1,[Define to enable binary status file])
fi

AC_ARG_ENABLE(statusfile, [AC_HELP_STRING([--enable-statusfile],[Enable support for status file])], 
  enable_statfile=$enableval, enable_statfile=no)

if test x"$enable_statfile" = xyes || test x"$enable_binstatfile" = xyes; then
   AC_DEFINE(ENABLE_STATFILE,1,[Define to enable status file])
fi

AC_ARG_ENABLE(chilliproxy, [AC_HELP_STRING([--enable-chilliproxy],[Enable support for HTTP AAA Proxy])], 
  enable_chilliproxy=$enableval, enable_chilliproxy=no)

if test x"$enable_chilliproxy" = xyes; then
   AC_DEFINE(ENABLE_CHILLIPROXY,1,[Define to enable HTTP AAA Proxy])
fi

AM_CONDITIONAL(WITH_CHILLIPROXY, [test x"$enable_chilliproxy" = xyes])

AC_ARG_ENABLE(rtmon, [AC_HELP_STRING([--enable-rtmon],[Enable support for route monitoring deamon])], 
  enable_rtmon=$enableval, enable_rtmon=no)

if test x"$enable_rtmon" = xyes ; then
   AC_DEFINE(ENABLE_RTMON,1,[Define to enable route monitoring deamon])
fi

AM_CONDITIONAL(WITH_RTMON, [test x"$enable_rtmon" = xyes])

AC_ARG_ENABLE(ewtapi, [AC_HELP_STRING([--enable-ewtapi],[Enable support for CoovaEWT API])], 
  enable_ewtapi=$enableval, enable_ewtapi=no)

if test x"$enable_ewtapi" = xyes; then
   AC_DEFINE(ENABLE_EWTAPI,1,[Define to enable CoovaEWT API])
fi

AC_SUBST(sysconfdir)
AC_CONFIG_FILES([Makefile 
		 bstring/Makefile 
		 doc/Makefile 
		 src/Makefile 
		 www/Makefile
                 conf/Makefile 
                 debian/Makefile 
		 coova-chilli.spec])

AC_OUTPUT
